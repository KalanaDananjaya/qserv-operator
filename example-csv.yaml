apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    capabilities: Seamless Upgrades
    categories: "OpenShift Optional"
    containerImage: registry.svc.ci.openshift.org/openshift/origin-v4.0:descheduler-operator
    createdAt: 2019-01-01T11:59:59Z
    description: An operator to run the OpenShift descheduler
    repository: https://github.com/openshift/descheduler-operator
    alm-examples: |
      [
        {
          "apiVersion": "descheduler.io/v1alpha1",
          "kind": "Descheduler",
          "metadata": {
            "name": "example-descheduler-1"
          },
          "spec": {
            "schedule": "*/1 * * * ?",
            "strategies": [
              {
                "name": "lownodeutilization",
                "params": [
                  {
                    "name": "cputhreshold",
                    "value": "10"
                  },
                  {
                    "name": "memorythreshold",
                    "value": "20"
                  },
                  {
                    "name": "memorytargetthreshold",
                    "value": "30"
                  }
                ]
              }
            ]
          }
        }
      ]
...
...
...
spec:
  displayName: Descheduler
  description: |-
    # Descheduler for Kubernetes

    ## Introduction

    Scheduling in Kubernetes is the process of binding pending pods to nodes, and is performed by
    a component of Kubernetes called kube-scheduler. The scheduler's decisions, whether or where a
    pod can or can not be scheduled, are guided by its configurable policy which comprises of set of
    rules, called predicates and priorities. The scheduler's decisions are influenced by its view of
    a Kubernetes cluster at that point of time when a new pod appears first time for scheduling.
    As Kubernetes clusters are very dynamic and their state change over time, there may be desired
    to move already running pods to some other nodes for various reasons

    * Some nodes are under or over utilized.
    * The original scheduling decision does not hold true any more, as taints or labels are added to
    or removed from nodes, pod/node affinity requirements are not satisfied any more.
    * Some nodes failed and their pods moved to other nodes.
      New nodes are added to clusters.

    Consequently, there might be several pods scheduled on less desired nodes in a cluster.
    Descheduler, based on its policy, finds pods that can be moved and evicts them. Please
    note, in current implementation, descheduler does not schedule replacement of evicted pods
    but relies on the default scheduler for that.

    ## Note

    Any api could be changed any time without any notice. That said, your feedback is
    very important and appreciated to make this project more stable and useful.
  icon:
  - base64data: this+is+a+base64-string==
    mediatype: image/png
  version: 0.0.1
  provider:
    name: Red Hat, Inc.
  maintainers:
  - email: support@redhat.com
    name: Red Hat
  links:
  - name: GitHub Repository
    url: https://github.com/openshift/descheduler-operator
  keywords: ['deschedule', 'scale', 'binpack', 'efficiency']
